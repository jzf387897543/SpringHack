<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dosk技术站</title>
  
  <subtitle>SpringHack的无名技术小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dosk.win/"/>
  <updated>2018-11-11T16:28:50.643Z</updated>
  <id>https://www.dosk.win/</id>
  
  <author>
    <name>SpringHack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 exagear 的破解(其实是原理解析)</title>
    <link href="https://www.dosk.win/2018/11/11/2018-11-12.00.01/"/>
    <id>https://www.dosk.win/2018/11/11/2018-11-12.00.01/</id>
    <published>2018-11-11T16:03:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>介绍介绍如何破解 exagear</p></blockquote><blockquote><p>通篇没有代码没有图，因为手机写的，iOS 搞 git 很坑的</p></blockquote><a id="more"></a><h3 id="What-is-exagear"><a href="#What-is-exagear" class="headerlink" title="What is exagear"></a>What is exagear</h3><blockquote><p>我觉得这个可以自己搜吧，就是一个能在 arm linux 上跑起来 i486 linux 的一个东西，原理用脚后跟都能想得到，binfmt 呗</p></blockquote><blockquote><p>既然如此，为何还要破解，自己搭建一下不就行了</p></blockquote><blockquote><p>话虽如此，重点在于 exagear 官方魔改了 wine，让其能够跑外 3G/1G 内存分配的内核上，而树莓派就是这么玩的。虽然，这个魔改版本是开源的，但是人都是懒惰的</p></blockquote><h3 id="Internal-of-exagear"><a href="#Internal-of-exagear" class="headerlink" title="Internal of exagear"></a>Internal of exagear</h3><blockquote><p>其实我自己用 debootstrap 搭建了一个 i386 ubuntu xenial 环境，但是如上所说，wine 用不了，这很难受的</p></blockquote><blockquote><p>But 当我决定破解 exagear 并安装好以后，我所有的 i386 二进制都提示需要激活了！WTF，这一下就让我知道，它是靠着 binfmt 这一层做的拦截</p></blockquote><blockquote><p>于是查看 binfmt misc 分区，发现 i386 的 magic 解释器并没有被更改，还是 qemu-i386-static，但是注意到有一个 register 的设备文件，同时发现了 exagear 的服务，通过读这段 shell 知道他原来是通过服务动态向 register 注册解释说，来实现的拦截</p></blockquote><blockquote><p>所以嘛，关闭并移除服务，写了段 chroot 的脚本，顺利跑起来了一切，知道原理一切都很简单</p></blockquote><h3 id="About-X11"><a href="#About-X11" class="headerlink" title="About X11"></a>About X11</h3><blockquote><p>这个比较坑，因为我都是 ssh 连进去的，其实也简单，首先在当前 X session 下执行 xhost + 让所有会话都能连接进来，然后在 ssh 环境 export DISPLAY 设置一下就好了</p></blockquote><blockquote><p>至于其他 exagear 的服务，其实我并不是很关心，反正关键的都跑起来了</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><blockquote><p>其实最后我失败了，有了 wine 也不能满足我的需求，因为 exagear 跑的是基于  wine 1.8 的魔改版本，有一些 Win32 的 EX 接口没有实现，是关于 IO 的，而我跑的这个东西，是 rust 写的，大量运用了这个接口，所以凉凉</p></blockquote><blockquote><p>查了下 wine 论坛，这个接口直到 wine 3 才有被实现，想哭</p></blockquote><blockquote><p>这里涉及到的技术点，大概就是 wine, binfmt, qemu-user-static, debootstrap 以及 chroot 这一坨，上文都是顺道提到了，感兴趣的可以靠自己 Google，我只是记录下我搞这个的心路历程</p></blockquote><blockquote><p>感兴趣的也可以 email 我私下里交流</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍介绍如何破解 exagear&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通篇没有代码没有图，因为手机写的，iOS 搞 git 很坑的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="crack" scheme="https://www.dosk.win/tags/crack/"/>
    
      <category term="exagear" scheme="https://www.dosk.win/tags/exagear/"/>
    
      <category term="raspberry pi" scheme="https://www.dosk.win/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>我又来立 flag 啦</title>
    <link href="https://www.dosk.win/2018/11/02/2018-11-03/"/>
    <id>https://www.dosk.win/2018/11/02/2018-11-03/</id>
    <published>2018-11-02T17:25:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先立-flag"><a href="#首先立-flag" class="headerlink" title="首先立 flag"></a>首先立 flag</h3><blockquote><p>以后坚持写博客，今年的数量都快赶上 2015 年了</p></blockquote><a id="more"></a><h3 id="关于最近做什么"><a href="#关于最近做什么" class="headerlink" title="关于最近做什么"></a>关于最近做什么</h3><blockquote><p>这个其实有些不好说，毕竟公司的东西，技术类很多都是不公开的</p></blockquote><blockquote><p>不过我可以说下个人状况，目前职位还是前端，不过已经不是写页面那种无聊的事情了，而是深入到 node/electron/webkit 等实现层级的，个人非常喜欢</p></blockquote><blockquote><p>小有成就吧，解决了很多 node/electron 开发模式中固有的问题，而且基本是在针对这些东西的性能痛点改造</p></blockquote><h3 id="关于业余生活"><a href="#关于业余生活" class="headerlink" title="关于业余生活"></a>关于业余生活</h3><blockquote><p>少吃饭，多睡觉，少读书，多看报</p></blockquote><blockquote><p>最近又把树莓派捡起来了，又搞了个微雪的 Game Hat 玩玩，合金弹头，赤色要塞</p></blockquote><blockquote><p>emmm，我最擅长的国画搁置很久了，还好这东西不会遗忘，靠的是灵感迸发</p></blockquote><blockquote><p>最近带了几个实习生陆续的在进展他们的转正事宜，都挺好的；而且今年两次绩效评估都很不错，感觉逐渐自立，也攒了一些，有点膨胀，甚至想买房了</p></blockquote><blockquote><p>还有就是折腾小牛 u1，还是很好玩的，也想搞摩托</p></blockquote><h3 id="有什么遗憾"><a href="#有什么遗憾" class="headerlink" title="有什么遗憾"></a>有什么遗憾</h3><blockquote><p>不能多回家看看，铁哥们也很难见面</p></blockquote><blockquote><p>还在漂泊，一个人</p></blockquote><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><blockquote><p>技术更加精进呗，本质上是一个喜欢玩的人，代码，硬件，都对我的工作起到了特别好的促进作用，可能在技术上我真的是疯子</p></blockquote><blockquote><p>该想想以后的生活了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先立-flag&quot;&gt;&lt;a href=&quot;#首先立-flag&quot; class=&quot;headerlink&quot; title=&quot;首先立 flag&quot;&gt;&lt;/a&gt;首先立 flag&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以后坚持写博客，今年的数量都快赶上 2015 年了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="自我激励" scheme="https://www.dosk.win/tags/%E8%87%AA%E6%88%91%E6%BF%80%E5%8A%B1/"/>
    
      <category term="职业生涯" scheme="https://www.dosk.win/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title>Node-FFI 不得不说的原理</title>
    <link href="https://www.dosk.win/2018/05/15/node-ffi/"/>
    <id>https://www.dosk.win/2018/05/15/node-ffi/</id>
    <published>2018-05-15T09:58:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-FFI-不得不数说的原理"><a href="#Node-FFI-不得不数说的原理" class="headerlink" title="Node-FFI 不得不数说的原理"></a>Node-FFI 不得不数说的原理</h3><blockquote><p>自己在实际开发中总结的东西</p></blockquote><a id="more"></a><h6 id="从计算机基础开始讲起"><a href="#从计算机基础开始讲起" class="headerlink" title="从计算机基础开始讲起"></a>从计算机基础开始讲起</h6><ul><li><p>线程, 进程, 协程</p><ul><li>线程: 操作系统能够进行运算调度的最小单位，包含在进程之中，是进程中的实际运作单位，顺序执行</li><li>进程: 程序的基本执行实体，包含 1 或多个线程</li><li>协程: 非操作系统调度，由用户手动调度切换上下文的程序组件</li><li>相关链接</li><li><ol><li><a href="https://zh.wikipedia.org/zh-hans/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a></li></ol></li><li><ol start="2"><li><a href="https://github.com/libuv/libuv" target="_blank" rel="noopener">libuv</a></li></ol></li></ul></li><li><p>函数调用约定, 指针, (动态/静态)链接库</p><ul><li>指针: 所有数据类型都包含对应的指针类型，其内容是指向的变量的地址，函数本身就是编译后的一块内存，所以函数本身就是指针</li><li>函数调用约定: 不同CPU不同操作系统的底层实现中，调用一个函数都是靠操作栈来实现，但是不同的环对栈的顺序与存储的大小约定不同，这些约定称为函数调用约定</li><li><ol><li><a href="https://blog.csdn.net/fly2k5/article/details/544112" target="_blank" rel="noopener">函数调用约定</a></li></ol></li><li><a href="http://lucky521.github.io/blog/design/2016/07/14/dylib-staticlib.html" target="_blank" rel="noopener">链接库</a></li></ul></li><li><p>符号表</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E8%A1%A8" target="_blank" rel="noopener">概念</a></li><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/nm.html" target="_blank" rel="noopener">如何查看</a></li></ul></li></ul><h6 id="回到-Node-js-的部分"><a href="#回到-Node-js-的部分" class="headerlink" title="回到 Node.js 的部分"></a>回到 Node.js 的部分</h6><ul><li><p>说说 V8</p><ul><li><a href="https://v8docs.nodesource.com/" target="_blank" rel="noopener">V8 Docs</a></li><li><a href="http://gitbook.cn/books/5938f4ae8b55d47644b7a445/index.html" target="_blank" rel="noopener">N-API</a></li><li>N-API 版本的 ffi 和 ref</li><li><ol><li><a href="https://github.com/node-ffi-napi/node-ffi-napi" target="_blank" rel="noopener">node-ffi-napi</a></li></ol></li><li><ol start="2"><li><a href="https://github.com/node-ffi-napi/ref-napi" target="_blank" rel="noopener">ref-napi</a></li></ol></li></ul></li><li><p>Node native addon</p><ul><li>格式: 动态链接库</li><li>文件后缀: .node</li><li>区别: 入口函数不同</li><li>Demo:</li><li><ol><li><a href="https://github.com/springhack/SpringHack/blob/write/assets/node-ffi-demo/addon.cc" target="_blank" rel="noopener">Node binding demo</a></li></ol></li><li><ol start="2"><li><a href="https://github.com/springhack/SpringHack/blob/write/assets/node-ffi-demo/calc.m" target="_blank" rel="noopener">FFI demo</a></li></ol></li><li><ol start="3"><li><a href="https://gist.github.com/dmh2000/9519489" target="_blank" rel="noopener">Via uv_default_loop</a></li></ol></li><li><ol start="4"><li><a href="https://github.com/springhack/SpringHack/blob/write/assets/node-ffi-demo/index.js" target="_blank" rel="noopener">JS Code</a></li></ol></li></ul></li></ul><blockquote><p>Demo 运行截图(N-API 为实验性特性所以会有一个警告):</p><p><img src="/images/demo.png" alt=""></p></blockquote><blockquote><p>其中第三种方案其实是借助 <code>libuv</code> 的接口实现，此前这种方式仅仅是因为</p><p>Node.js 使用了 <code>uv_default_loop</code>，不过在 N-API 中被官方支持了:</p><p><img src="/images/n-api-uv-loop.png" alt=""></p></blockquote><ul><li>Event Loop, GC<ul><li>简单来说: 一个分阶段的线程，通常我们称为 JS 主线程，V8 中使用 <code>uv_default_loop</code> 实现</li><li>GC: 即垃圾回收，垃圾回收是相对于我们编译器编译阶段可见的上下文为准的，即一个动态链接库的对象生命周期对调用它的程序不可见</li></ul></li></ul><h6 id="Node-FFI-令人兴奋的跳跃"><a href="#Node-FFI-令人兴奋的跳跃" class="headerlink" title="Node-FFI: 令人兴奋的跳跃"></a>Node-FFI: 令人兴奋的跳跃</h6><ol><li><p>从载入动态库说起</p><blockquote><p>a. 其实大部分编译型语言是具备载入动态库的能力的，因为操作系统已经提供了相关的封装，但是必须是编译前定义好被调用函数结构、函数调用规则等</p><p>b. 动态类型语言是运行在 VM 之上，而此时的 VM 已经是是编译过的二进制模块，已经不具备上文所说的特性</p></blockquote></li><li><p>libffi: Node-FFI 的核心</p><blockquote><p>a. 优势: 可以动态定义函数的调用方法，可以动态定绑定函数实体到指针</p><p>b. 应用: <code>OpenJDK, Dalvik, CPython</code> 等非常著名的引擎: <a href="http://sourceware.org/libffi/" target="_blank" rel="noopener">libffi</a></p><p>c. 实现:</p></blockquote></li></ol><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:center">实现方式</th><th style="text-align:center">实现语言</th></tr></thead><tbody><tr><td style="text-align:left">定义函数</td><td style="text-align:center">通过定义 <code>ffi_cif</code> 结构体描述函数，并通过模拟函数调用方式实现调用</td><td style="text-align:center"><code>inline asm</code></td></tr><tr><td style="text-align:left">绑定函数</td><td style="text-align:center">通过定义 <code>ffi_closure</code> 绑定 <code>ffi_cif</code> 到指定函数并返回一个函数指针，当调用这个指针，指针指向的函数通过 <code>ffi_cif</code> 结构体的定义模拟取栈的操作并传入被绑定的函数</td><td style="text-align:center"><code>inline asm</code></td></tr></tbody></table><h6 id="Node-FFI-函数回调的实现"><a href="#Node-FFI-函数回调的实现" class="headerlink" title="Node-FFI: 函数回调的实现"></a>Node-FFI: 函数回调的实现</h6><ul><li><p>流程实现</p><ul><li>太长了，参见源码与我的讲解: <a href="https://github.com/springhack/node-ffi/blob/master/src/callback_info.cc" target="_blank" rel="noopener">callback_info.cc</a></li></ul></li><li><p>源码角度展开</p><ul><li><a href="https://github.com/springhack/node-ffi/blob/master/src/ffi.cc" target="_blank" rel="noopener">FFI_CALL</a></li><li><a href="https://github.com/springhack/node-ffi/blob/master/src/callback_info.cc" target="_blank" rel="noopener">FFI_CALLBACK</a></li></ul></li><li><p>回调的惊险跳跃: 多线程回调如何变成单线程 &amp;&amp; 如何 invoke 进入 JS EventLoop</p><ul><li><a href="https://github.com/springhack/node-ffi/blob/master/src/threaded_callback_invokation.cc" target="_blank" rel="noopener">CALLBACK_INVOKATION</a></li></ul></li></ul><h6 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h6><ul><li>让我想想再说…</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-FFI-不得不数说的原理&quot;&gt;&lt;a href=&quot;#Node-FFI-不得不数说的原理&quot; class=&quot;headerlink&quot; title=&quot;Node-FFI 不得不数说的原理&quot;&gt;&lt;/a&gt;Node-FFI 不得不数说的原理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;自己在实际开发中总结的东西&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年首发</title>
    <link href="https://www.dosk.win/2018/01/01/2018first/"/>
    <id>https://www.dosk.win/2018/01/01/2018first/</id>
    <published>2018-01-01T03:53:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018我最关心的还是困难群众!</p></blockquote><a id="more"></a><p>【好久没发博客了】</p><blockquote><p>我就是来证明一下  其实我还活着</p></blockquote><blockquote><p>科科</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2018我最关心的还是困难群众!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="2018" scheme="https://www.dosk.win/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>macOS下截图程序的开发</title>
    <link href="https://www.dosk.win/2017/08/31/screencapture/"/>
    <id>https://www.dosk.win/2017/08/31/screencapture/</id>
    <published>2017-08-31T05:52:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>讲一讲macOS下截图程序是如何开发的，目前网络上也没有什么好的资料</p></blockquote><a id="more"></a><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><blockquote><p>说道编程，现在的趋势一定是不要造轮子(当然优秀的轮子可以造)，所以第一件事是去Github查查看是否有人写过好的，结果发现大部分都是工具类型的库，并没有完整的带UI的库。</p></blockquote><blockquote><p>第二个想法是看看别人是怎么写的。这个年头，一个码农没多几门手艺是活不下去的。作为一个前端开发工程师，我业余的时间几乎都在写ObjC、C++、Java等，反编译和基础的网络攻防更是掌握了一点点，于是我就对业界标杆QQ和价值观钉钉动手了 =。=</p></blockquote><blockquote><p>QQ的方案是双进程，钉钉的方案是点击截图的时候启动一个独立的进程。我开心坏了，这不是等着我拿来直接用么？而且价值观场还把截图封装成了一个npm包，简直不要不要的。不过，很快这个方案就被PM否定了：怕引起版权问题。说的很对，毕竟那是人家内网npm服务器上的包，即使源码摆在你面前你也不能用，因为人家有价值观！</p></blockquote><blockquote><p>画风变得有点沉重，我决定自己开发截图。考虑到项目时间上的问题，我准备简化UI的搭建，使用macOS自带的WebKit和前端技术来实现UI，这便是坑的开始，当然这个坑并不大。</p></blockquote><h3 id="截图必备的几个Features"><a href="#截图必备的几个Features" class="headerlink" title="截图必备的几个Features"></a>截图必备的几个Features</h3><blockquote><p>键盘事件响应，鼠标事件响应，肯定都是必要的。考虑到目前macOS基本都开启了隔离Spaces的功能，我准备在每个NSScreen上开启一个浮动的窗口，拦截鼠标和键盘事件。</p></blockquote><blockquote><p>But，macOS的安全机制是很健全的，如果你使用继承NSPanel的方式实现，你的窗口就不能获取焦点。这里交代一下，macOS下一个窗口完全获取我们认知上那种焦点，需要满足三个条件的：你的NSRunningApplication是active的，你的NSWindow是mainWindow，你的程序是keyWindow。所以，最后的最后，我的FloatPanel继承的是NSWindow实现的。</p></blockquote><blockquote><p>鼠标事件的监听，是我觉的最大的坑。我目前并没有找到什么好的方案。在多个屏幕的前提下，每个屏幕是独立的NSWindow，我需要在鼠标移动进响应frame的时候使齐成为mainWindow和keyWindow，不然鼠标click的第一下默认行为是获取焦点而不是开始截取区域。</p></blockquote><blockquote><p>目前我的实现是通过NSTimer实现的2333…谁有好的建议告诉我…</p></blockquote><blockquote><p>截取的操作是通过Core Graphics相关接口实现的。这里有个trick，就是如果你隐藏掉鼠标然后立刻截取，会因为屏幕缓冲的原因截取到鼠标。但是当你等到下一个小渲染阶段，就不会截取到，而且Retina屏的缓冲会比普分屏多(可能是一个，我观察到的是一个) =。=</p></blockquote><blockquote><p>键盘事件，可以使用Carbon监听，不过有点大材小用了。另外，使用的是Carbon用来监听快捷键的接口，但是修饰键为0，就可以只监听一个键，比如早期我的实现是监听了Esc键来退出。。。现在换成了addLocalMonitorForEventsMatchingMask，因为我的程序继承NSWindow后能够获取焦点了 =。=</p></blockquote><blockquote><p>截取和创建窗口使用多线程异步，当然，在macOS下，用GCD爽的多 =。=</p></blockquote><blockquote><p>因为做成尽可能快，所以采用了QQ的模式。但是我的主进程是Node.js，所以采用了最简单的UNIX信号量，SIGALRM，简单暴力。</p></blockquote><h3 id="那些坑们"><a href="#那些坑们" class="headerlink" title="那些坑们"></a>那些坑们</h3><blockquote><ul><li>截图后需要让Node.js进程获取焦点，后来想起我用户UNIX信号量，所以直接获取对应PID所属的NSRunningApplication，让其active了</li></ul></blockquote><blockquote><ul><li>最最最大的坑，Display的数量和NSScreen的数量不一样！！不一样！！！所以我采用NSScreen过滤，然后获取其包含的Display列表，取第一个来截图，反而更快乐 =。=</li></ul></blockquote><h3 id="说了那么多，代码呢"><a href="#说了那么多，代码呢" class="headerlink" title="说了那么多，代码呢?"></a>说了那么多，代码呢?</h3><blockquote><p>不给 -。-</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;讲一讲macOS下截图程序是如何开发的，目前网络上也没有什么好的资料&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="https://www.dosk.win/tags/macOS/"/>
    
      <category term="截图" scheme="https://www.dosk.win/tags/%E6%88%AA%E5%9B%BE/"/>
    
      <category term="编程" scheme="https://www.dosk.win/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>以后骑车上班</title>
    <link href="https://www.dosk.win/2017/08/29/bike/"/>
    <id>https://www.dosk.win/2017/08/29/bike/</id>
    <published>2017-08-29T09:09:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近搞了辆自行车，就酱紫，嗯</p></blockquote><blockquote><p>不怎么想动弹，博客也是</p></blockquote><blockquote><p>周末去后海玩玩</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近搞了辆自行车，就酱紫，嗯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;不怎么想动弹，博客也是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;周末去后海玩玩&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="吐槽" scheme="https://www.dosk.win/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>毕业之后的人生计划</title>
    <link href="https://www.dosk.win/2017/07/02/think/"/>
    <id>https://www.dosk.win/2017/07/02/think/</id>
    <published>2017-07-02T05:41:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<p>没事瞎琢磨系列</p><a id="more"></a><h3 id="一个视频作为开头"><a href="#一个视频作为开头" class="headerlink" title="一个视频作为开头"></a>一个视频作为开头</h3><blockquote><p><a href="http://weibo.com/tv/v/F4i6x1imK?fid=1034:56fd14c2a14c7e12c6c9de60e197ad8a" target="_blank" rel="noopener">点我去秒拍</a><br>对的，最近有点被无聊逼疯了。说实话我就是个死宅，最近有趋势变成死肥宅了，OCD晚期 + 懒癌晚期是我努力的唯一动力</p></blockquote><h3 id="“大龄”程序员思考"><a href="#“大龄”程序员思考" class="headerlink" title="“大龄”程序员思考"></a>“大龄”程序员思考</h3><blockquote><p>最近不知如何总是焦灼，想不出自己年纪大的时候出路如何。这时候，我爸就会来教训我了，你一个才24岁的小子考虑这个事情有什么用。</p></blockquote><blockquote><p>其实，我只是对前路感觉不到方向的迷茫而已。刚毕业的那天，莫名的伤感了，作为一个这么不正经的人。</p></blockquote><blockquote><p>也对，我这都是瞎琢磨。</p></blockquote><h3 id="还对别的感兴趣么"><a href="#还对别的感兴趣么" class="headerlink" title="还对别的感兴趣么"></a>还对别的感兴趣么</h3><blockquote><p>有啊，目前会萨克斯，国画满级，还想学钢琴、吉他、跳舞。But，你说说看，作为一个软件工程师，这几项哪个能让我后半辈子过的好一点？</p></blockquote><h3 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h3><blockquote><p>和女朋友，一步一步耕耘到那一天吧，都在努力。</p></blockquote><h3 id="噩梦"><a href="#噩梦" class="headerlink" title="噩梦"></a>噩梦</h3><blockquote><p>她和我说昨晚做噩梦了，一开始我还以为说的是我。</p></blockquote><blockquote><p>其实吧，我做噩梦已经习惯了，经常在半夜惊醒，带着一身冷汗。</p></blockquote><blockquote><p>昨夜，也是惊醒，还很大声的叫了一声。看了眼窗外，已经是没有什么灯光了。不过说实话，开着卧室门睡觉还真是挺吓人的。。。</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>可能我就是个致郁系的属性吧</p></blockquote><h3 id="毕业了"><a href="#毕业了" class="headerlink" title="毕业了"></a>毕业了</h3><blockquote><p>主动放弃了校优秀毕设的权利，让给了一个做 App 的。很多人以为我不甘心，说实话，我只是对那个名、那个钱，没什么兴趣了。</p></blockquote><blockquote><p>总是透露着一个过来人的神情，殊不知，越是过来人越在夜深人静的时候伤感，入戏太深了我。</p></blockquote><h3 id="同学们"><a href="#同学们" class="headerlink" title="同学们"></a>同学们</h3><blockquote><p>北京，再聚，我等你们。</p></blockquote><blockquote><p>2017.07</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没事瞎琢磨系列&lt;/p&gt;
    
    </summary>
    
    
      <category term="毕业" scheme="https://www.dosk.win/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="感想" scheme="https://www.dosk.win/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>React 脚手架更新</title>
    <link href="https://www.dosk.win/2017/04/18/boot2env-update/"/>
    <id>https://www.dosk.win/2017/04/18/boot2env-update/</id>
    <published>2017-04-18T07:57:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是一个非常让我懊恼的更新"><a href="#这是一个非常让我懊恼的更新" class="headerlink" title="这是一个非常让我懊恼的更新"></a>这是一个非常让我懊恼的更新</h3><blockquote><p>因为本身 react-hot-loader 的版本其实已经到 3 了但是默认情况下装的还是 1.3.1 ，我也一直没有注意到这件事情，所以在某个版本的 React 更新之后，我的脚手架跪了 ==</p></blockquote><blockquote><p>但是在我那天进行调整的时候我发现根本没办法调整好，于是我只能暂且搁置</p></blockquote><h3 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h3><blockquote><p>终于是改出来了，现在可以用了，只不过比原来多了一个文件，但是用起来没什么区别。</p></blockquote><blockquote><p>还是熟悉的 coder 命令，还是一样的热更新 ==</p></blockquote><blockquote><p>建议尝试，下面是日常的代码区 =。=</p></blockquote><a id="more"></a><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌─[springhack@localhost]─[~/Documents/Codes]</span><br><span class="line">└──╼ $coder -h</span><br><span class="line"></span><br><span class="line">  Usage: coder [options]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help          output usage information</span><br><span class="line">    -V, --version       output the version number</span><br><span class="line">    -t, --type &lt;value&gt;  What to create: project, component, vimrc, bashrc</span><br><span class="line">    -f, --file &lt;value&gt;  File to cerate</span><br><span class="line">    -s, --ssr           SSR enable: default value is false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;这是一个非常让我懊恼的更新&quot;&gt;&lt;a href=&quot;#这是一个非常让我懊恼的更新&quot; class=&quot;headerlink&quot; title=&quot;这是一个非常让我懊恼的更新&quot;&gt;&lt;/a&gt;这是一个非常让我懊恼的更新&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;因为本身 react-hot-loader 的版本其实已经到 3 了但是默认情况下装的还是 1.3.1 ，我也一直没有注意到这件事情，所以在某个版本的 React 更新之后，我的脚手架跪了 ==&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;但是在我那天进行调整的时候我发现根本没办法调整好，于是我只能暂且搁置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Now&quot;&gt;&lt;a href=&quot;#Now&quot; class=&quot;headerlink&quot; title=&quot;Now&quot;&gt;&lt;/a&gt;Now&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;终于是改出来了，现在可以用了，只不过比原来多了一个文件，但是用起来没什么区别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;还是熟悉的 coder 命令，还是一样的热更新 ==&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;建议尝试，下面是日常的代码区 =。=&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://www.dosk.win/tags/React/"/>
    
      <category term="脚手架" scheme="https://www.dosk.win/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="前端" scheme="https://www.dosk.win/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="boot2env" scheme="https://www.dosk.win/tags/boot2env/"/>
    
  </entry>
  
  <entry>
    <title>做一个专职修 BUG 的码农</title>
    <link href="https://www.dosk.win/2017/04/09/bug-fixer/"/>
    <id>https://www.dosk.win/2017/04/09/bug-fixer/</id>
    <published>2017-04-09T06:20:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Day-one"><a href="#Day-one" class="headerlink" title="Day one"></a>Day one</h3><blockquote><p>最近在上班了，虽然是实习但是我还是很上心的，不过人都是懒得，我也是 Orz …<br>第一天听 HR 培训了一上午，各种事情，其实大体上都一样，我就记住一条，公司内部对谈恋爱有要求 2333<br>然后下午就是看代码了，其实代码都简单，只是代码架构上的设计我不一定能一下子命中要害，这个需要时间磨合，没办法，每个人的设计思维都是不同的。</p></blockquote><h3 id="Day-two"><a href="#Day-two" class="headerlink" title="Day two"></a>Day two</h3><blockquote><p>第二天我就要求派任务了，然后，然后解决了 Windows 下更新的问题。仔细看了下，这个问题从最初的立项就存在了 23333<br>于是现在就被安排来专职修 BUG 了。这样也好，修 BUG 最能锻炼自己的逻辑思维，因为要顺着别人的思维去思考才能理解业务逻辑</p></blockquote><h3 id="Day-three"><a href="#Day-three" class="headerlink" title="Day three"></a>Day three</h3><blockquote><p>我能说清明节放假了么，科科，放了三天，今天第三天，把 Windows 下更新的问题扫尾了，顺便修了个无关紧要的 BUG 0.0<br>之后的几天没什么说的。</p></blockquote><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><blockquote><p>流水账一样的才叫日志吧<br>旁边的同事在改版，大量的 Less 代码要改，他们和 UI 磨合的很好的样子<br>我今天貌似没什么事，未来几天要抽时间写写毕设的东西了，毕竟我还没毕业<br>另外今天写博客的原因还有一个，就是 Github 空白好多了不太好看 2333</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Day-one&quot;&gt;&lt;a href=&quot;#Day-one&quot; class=&quot;headerlink&quot; title=&quot;Day one&quot;&gt;&lt;/a&gt;Day one&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近在上班了，虽然是实习但是我还是很上心的，不过人都是懒得，我也是 Orz
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入探究 JavaScript 的函数调用</title>
    <link href="https://www.dosk.win/2017/03/22/google-v8-function-call/"/>
    <id>https://www.dosk.win/2017/03/22/google-v8-function-call/</id>
    <published>2017-03-22T12:37:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>可能很多人在学习 JavaScript 过程中碰到过函数参数传递方式的迷惑，本着深入的精神，我想再源码中寻找些答案<br>不过在做这件事之前，首先明确几个概念。抛弃掉值传递、引用传递等固有叫法，回归英文：<br><code>call by reference</code> &amp;&amp; <code>call by value</code> &amp;&amp; <code>call by sharing</code><br>分别是我们理解的 C++ 中的引用传递，值传递。第三种比较迷惑，官方解释是 <code>receives the copy of the reference to object</code> 。我用通俗的话解释一下：<br>Object 可以理解为 key 的集合，Object 对 key 指向的数据是引用性质的(这里不深究是指针实现还是C++引用实现)，函数接收的是一个变量的 copy，变量包含了 Object 的引用 ，是一个值传递。<br>那么很明显，函数传参的时候我们接收到的对象型参其实是实参的复制，所以直接更改型参的指向是不可行的；由于 Object 本身的 key 都是引用，所以修改 key 的指向是可行的。</p></blockquote><a id="more"></a><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><blockquote><p>简单来几段代码即可证明<br>Code 1: 函数能修改 key 指向的数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let func = obj =&gt; &#123; obj.name = &apos;Dosk&apos; &#125;;</span><br><span class="line">let obj = &#123;name : &apos;Alxw&apos;&#125;;</span><br><span class="line">console.log(obj);  //&#123; name: &apos;Alxw&apos; &#125;</span><br><span class="line">func(obj)</span><br><span class="line">console.log(obj);  //&#123; name: &apos;Dosk&apos; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Code 2: 函数不能修改 obj</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let func = obj =&gt; &#123; obj = &#123;&#125; &#125;;</span><br><span class="line">let obj = &#123;name : &apos;Alxw&apos;&#125;;</span><br><span class="line">console.log(obj);  //&#123; name: &apos;Alxw&apos; &#125;</span><br><span class="line">func(obj)</span><br><span class="line">console.log(obj);  //&#123; name: &apos;Alxw&apos; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Code 3: 内部 obj 和外部 === 结果相等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let def = &#123;name : &apos;Alxw&apos;&#125;;</span><br><span class="line">let func = obj =&gt; &#123; console.log(obj === def) &#125;;</span><br><span class="line">func(def);  //true</span><br></pre></td></tr></table></figure><blockquote><p>所以第三段代码可能有疑问了，既然 obj 是 def 的复制，为什么 === 操作还能够为真？不是说 === 操作对于 Object 比较的是在内存中的地址么，如果是复制应该是 false 才对啊？<br>所以我们回到 Google V8 的源码来看这件事。</p></blockquote><h3 id="深入-Google-V8"><a href="#深入-Google-V8" class="headerlink" title="深入 Google V8"></a>深入 Google V8</h3><blockquote><p>我们来看看源码里严格等于操作代码部分：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool Object::StrictEquals(Object* that) &#123;</span><br><span class="line">  if (this-&gt;IsNumber()) &#123;</span><br><span class="line">    if (!that-&gt;IsNumber()) return false;</span><br><span class="line">    return NumberEquals(this, that);</span><br><span class="line">  &#125; else if (this-&gt;IsString()) &#123;</span><br><span class="line">    if (!that-&gt;IsString()) return false;</span><br><span class="line">    return String::cast(this)-&gt;Equals(String::cast(that));</span><br><span class="line">  &#125; else if (this-&gt;IsSimd128Value()) &#123;</span><br><span class="line">    if (!that-&gt;IsSimd128Value()) return false;</span><br><span class="line">    return Simd128Value::cast(this)-&gt;Equals(Simd128Value::cast(that));</span><br><span class="line">  &#125;</span><br><span class="line">  return this == that;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看起来应该是最后一种情况，理论上如果 def 和 obj 是不同的对象，那么应该返回 false 才对，这不是推翻了上文所述么？其实不，忽略了一件事，即 Google V8 内部在实例化一个 Object 的时候，本身就是动态实例化，而我们知道在编译型语言中如果动态实例化只能够在堆内存上，即只能够指针引用。这个结论是的证明涉及到 Local 、Handle 等 class 的实现，我觉得太麻烦，有一个简单的证明方式，即搜索源码得到所有调用 <code>Object::StrictEquals</code> 的地方都是直接传入而没有取地址操作。<br>不过有人会问，既然是值传递的变量包含 Object 的引用，理论上也能够修改 Object 才对，为什么第三段代码不能修改呢？<br>很简单的道理，因为我们在 JavaScript 语言逻辑层次上的所谓的操作，只不过是在调用 Google V8 的实例方的法而已，根本不可能操作到这一地步(当然，潜在的 BUG 不算的 -。-)</p></blockquote><h3 id="重新定义"><a href="#重新定义" class="headerlink" title="重新定义"></a>重新定义</h3><blockquote><p>我觉得到这里可以给 <code>call by sharing</code> 重新解释一下了：<br>的确，传递的时候是值传递，但是内容包含了 Object 的指针，而且不能够修改这个指针，他是多个变量共享的。</p></blockquote><h3 id="另一种简单的证明"><a href="#另一种简单的证明" class="headerlink" title="另一种简单的证明"></a>另一种简单的证明</h3><blockquote><p>来来来，看源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">V8_DEPRECATE_SOON(&quot;Use maybe version&quot;,</span><br><span class="line">                  Local&lt;Value&gt; Call(Local&lt;Value&gt; recv, int argc,</span><br><span class="line">                                    Local&lt;Value&gt; argv[]));</span><br><span class="line">V8_WARN_UNUSED_RESULT MaybeLocal&lt;Value&gt; Call(Local&lt;Context&gt; context,</span><br><span class="line">                                             Local&lt;Value&gt; recv, int argc,</span><br><span class="line">                                             Local&lt;Value&gt; argv[]);</span><br></pre></td></tr></table></figure><blockquote><p>上面的是即将弃用的接口，碰巧我看到的这个版本代码包含大量的这种即将弃用的代码，看看就好。重点是第二个接口，是函数的唯一的调用的接口。里面的 <code>Local&lt;Value&gt;</code> 最终会调用 C++ 的位复制，所以可以简单的证明就是值传递。</p></blockquote><h3 id="可能是重点"><a href="#可能是重点" class="headerlink" title="可能是重点"></a>可能是重点</h3><blockquote><p>别忘了，我们定义的的变量都是类似 <code>Handle&lt;Object&gt;</code> 这种形式的，所以它们之间对象才是共享的，我们所说的 JavaScript 里面变量并不直接指的是 Object 的实例!!!</p></blockquote><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><blockquote><p>总之理解起来可能很费劲甚至有错误，但是在 JavaScript 语言层次上能够确定了特性，这才是重要的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;可能很多人在学习 JavaScript 过程中碰到过函数参数传递方式的迷惑，本着深入的精神，我想再源码中寻找些答案&lt;br&gt;不过在做这件事之前，首先明确几个概念。抛弃掉值传递、引用传递等固有叫法，回归英文：&lt;br&gt;&lt;code&gt;call by reference&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;call by value&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;call by sharing&lt;/code&gt;&lt;br&gt;分别是我们理解的 C++ 中的引用传递，值传递。第三种比较迷惑，官方解释是 &lt;code&gt;receives the copy of the reference to object&lt;/code&gt; 。我用通俗的话解释一下：&lt;br&gt;Object 可以理解为 key 的集合，Object 对 key 指向的数据是引用性质的(这里不深究是指针实现还是C++引用实现)，函数接收的是一个变量的 copy，变量包含了 Object 的引用 ，是一个值传递。&lt;br&gt;那么很明显，函数传参的时候我们接收到的对象型参其实是实参的复制，所以直接更改型参的指向是不可行的；由于 Object 本身的 key 都是引用，所以修改 key 的指向是可行的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.dosk.win/tags/Node-js/"/>
    
      <category term="函数" scheme="https://www.dosk.win/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>React项目脚手架一枚</title>
    <link href="https://www.dosk.win/2017/02/23/boot2env/"/>
    <id>https://www.dosk.win/2017/02/23/boot2env/</id>
    <published>2017-02-23T05:44:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><blockquote><p>总是在不断的练习 React 搞项目，总结出了自己的一套开发结构，所以搞成了一个脚手架</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>很简单，先安装：<code>npm install boot2env -g</code> 然后就可以使用了；<br>里面带了两个命令：<code>bootvm</code> 和 <code>coder</code> ，两个命令是两个工具，第二个是脚手架的命令。</p></blockquote><a id="more"></a><h3 id="bootvm"><a href="#bootvm" class="headerlink" title="bootvm"></a>bootvm</h3><blockquote><p>这个命令是为了帮助用来简化连接 ssh 和 VirtualBox 的命令，如果你想连接 VBox 你需要重新编辑下脚本<br><code>~/.ssh/auto_login</code> 里面是配置，每行五个元素，地址、账号、密码、端口、密钥，空白字符分开，当然每个元素也不要含空白</p></blockquote><h3 id="coder"><a href="#coder" class="headerlink" title="coder"></a>coder</h3><blockquote><p>命令的格式为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌─[SpringHack@SpringHack]─[~/Public]</span><br><span class="line">└──╼ $coder -h</span><br><span class="line"></span><br><span class="line">  Usage: coder [options]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help          output usage information</span><br><span class="line">    -V, --version       output the version number</span><br><span class="line">    -t, --type &lt;value&gt;  What to create: project, component, vimrc, bashrc</span><br><span class="line">    -f, --file &lt;value&gt;  File to cerate</span><br><span class="line">    -s, --ssr           SSR enable: default value is false</span><br></pre></td></tr></table></figure><blockquote><p>可见能够创建项目、组件、vimrc和bashrc<br>项目选型为：<code>React + ES.next + Webpack + MobX</code> ，支持的特性有：<code>Tree Shaking, SSR, ES Decorator</code> 等<br>剩下的不多说，安装下来就知道了</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>留下个 <code>bootvm</code> 的画面：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">┌─[SpringHack@SpringHack]─[~/Public]</span><br><span class="line">└──╼ $bootvm</span><br><span class="line"></span><br><span class="line">         #####</span><br><span class="line">        #######</span><br><span class="line">        ##O#O##            Powered by SpringHack</span><br><span class="line">        #######            Email: springhack@live.cn</span><br><span class="line">      ###########</span><br><span class="line">     #############</span><br><span class="line">    ###############</span><br><span class="line">    ################</span><br><span class="line">   #################</span><br><span class="line"> #####################</span><br><span class="line"> #####################</span><br><span class="line">   #################</span><br><span class="line"></span><br><span class="line">Boot option:</span><br><span class="line">1. Boot a local VM.</span><br><span class="line">2. Connect to a remote host.</span><br><span class="line">Choose one: 2</span><br><span class="line">List all remote host:</span><br><span class="line">1. ubuntu@115.159.151.158</span><br><span class="line">2. ubuntu@115.159.152.88</span><br><span class="line">3. root@202.199.24.220</span><br><span class="line">4. root@202.199.24.205</span><br><span class="line">5. springhack@127.0.0.1</span><br><span class="line">Choice a host: 1</span><br></pre></td></tr></table></figure><blockquote><p>会自动连接输入密码使用密钥 -。-</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;总是在不断的练习 React 搞项目，总结出了自己的一套开发结构，所以搞成了一个脚手架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;很简单，先安装：&lt;code&gt;npm install boot2env -g&lt;/code&gt; 然后就可以使用了；&lt;br&gt;里面带了两个命令：&lt;code&gt;bootvm&lt;/code&gt; 和 &lt;code&gt;coder&lt;/code&gt; ，两个命令是两个工具，第二个是脚手架的命令。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React.js" scheme="https://www.dosk.win/tags/React-js/"/>
    
      <category term="Node.js" scheme="https://www.dosk.win/tags/Node-js/"/>
    
      <category term="ECMAScript" scheme="https://www.dosk.win/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>Node.js异步IO实现浅析</title>
    <link href="https://www.dosk.win/2017/02/04/node-async-io/"/>
    <id>https://www.dosk.win/2017/02/04/node-async-io/</id>
    <published>2017-02-04T16:09:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><blockquote><p>其实就是对 Node.js 的异步 IO 很感兴趣，加之最近可能要定制 Node.js ，所以决定研究研究看看。本身是 C/C++ 出身，看这点代码还是轻车熟路的，分析中并没有涉及 V8 的内部实现。<br>版本：<a href="https://github.com/nodejs/node/tree/e116cbe3207a471b3d604466baad49b141e32230" target="_blank" rel="noopener">e116cbe3207a471b3d604466baad49b141e32230</a></p></blockquote><h3 id="入口点"><a href="#入口点" class="headerlink" title="入口点"></a>入口点</h3><blockquote><p>因为是要研究研究异步 IO ，我觉得从 fs 模块下手是最简单的了。源码通过 Git 克隆下来以后，直觉告诉我 fs 模块的源码入口点在 lib 里面。这里我从 fs.readFile 开始下手。</p></blockquote><a id="more"></a><h3 id="层层深入-JS层"><a href="#层层深入-JS层" class="headerlink" title="层层深入 - JS层"></a>层层深入 - JS层</h3><blockquote><p>基于我克隆的版本的这个函数定义是在 fs.js 的 253 行，代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile = function(path, options, callback) &#123;</span><br><span class="line">  callback = maybeCallback(arguments[arguments.length - 1]);</span><br><span class="line">  options = getOptions(options, &#123; flag: &apos;r&apos; &#125;);</span><br><span class="line"></span><br><span class="line">  if (!nullCheck(path, callback))</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  var context = new ReadFileContext(callback, options.encoding);</span><br><span class="line">  context.isUserFd = isFd(path); // file descriptor ownership</span><br><span class="line">  var req = new FSReqWrap();</span><br><span class="line">  req.context = context;</span><br><span class="line">  req.oncomplete = readFileAfterOpen;</span><br><span class="line"></span><br><span class="line">  if (context.isUserFd) &#123;</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">      req.oncomplete(null, path);</span><br><span class="line">    &#125;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  binding.open(pathModule._makeLong(path),</span><br><span class="line">               stringToFlags(options.flag || &apos;r&apos;),</span><br><span class="line">               0o666,</span><br><span class="line">               req);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码的逻辑不解释了基本都看得明白，最后的调用 binding.open 的是原生调用，实现基于 C++ ，具体因为不是关注重点我直接忽略了。<br>关于 fd 的判断直接忽略，我们关注到创建的 FSReqWrap 的 context 是一个 ReadFileContext 实例；oncomplete 指向一个读文件的回调，进入它可以看到：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function readFileAfterOpen(err, fd) &#123;</span><br><span class="line">  var context = this.context;</span><br><span class="line"></span><br><span class="line">  if (err) &#123;</span><br><span class="line">    context.callback(err);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.fd = fd;</span><br><span class="line"></span><br><span class="line">  var req = new FSReqWrap();</span><br><span class="line">  req.oncomplete = readFileAfterStat;</span><br><span class="line">  req.context = context;</span><br><span class="line">  binding.fstat(fd, req);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function readFileAfterStat(err, st) &#123;</span><br><span class="line">  var context = this.context;</span><br><span class="line"></span><br><span class="line">  if (err)</span><br><span class="line">    return context.close(err);</span><br><span class="line"></span><br><span class="line">  var size = context.size = st.isFile() ? st.size : 0;</span><br><span class="line"></span><br><span class="line">  if (size === 0) &#123;</span><br><span class="line">    context.buffers = [];</span><br><span class="line">    context.read();</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (size &gt; kMaxLength) &#123;</span><br><span class="line">    err = new RangeError(&apos;File size is greater than possible Buffer: &apos; +</span><br><span class="line">                         `0x$&#123;kMaxLength.toString(16)&#125; bytes`);</span><br><span class="line">    return context.close(err);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.buffer = Buffer.allocUnsafeSlow(size);</span><br><span class="line">  context.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里直接我跳过两个方法的分析， 但是要注意 this 的指向和 context 的传递 0.0 ，最后我们看到了 context.read ，context 是一步一步传递下来的 ReadFileContext 实例，我们进入它的定义看看：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ReadFileContext.prototype.read = function() &#123;</span><br><span class="line">  var buffer;</span><br><span class="line">  var offset;</span><br><span class="line">  var length;</span><br><span class="line"></span><br><span class="line">  if (this.size === 0) &#123;</span><br><span class="line">    buffer = this.buffer = Buffer.allocUnsafeSlow(kReadFileBufferLength);</span><br><span class="line">    offset = 0;</span><br><span class="line">    length = kReadFileBufferLength;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    buffer = this.buffer;</span><br><span class="line">    offset = this.pos;</span><br><span class="line">    length = this.size - this.pos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var req = new FSReqWrap();</span><br><span class="line">  req.oncomplete = readFileAfterRead;</span><br><span class="line">  req.context = this;</span><br><span class="line"></span><br><span class="line">  binding.read(this.fd, buffer, offset, length, -1, req);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最终我们还是遇到了 binding.read 。这个调用之前的逻辑我相信大家看得懂，我们开始进入 C++ 的世界了 == </p></blockquote><h3 id="层层深入-C-层"><a href="#层层深入-C-层" class="headerlink" title="层层深入 - C++层"></a>层层深入 - C++层</h3><blockquote><p>这段代码定义在哪呢？我不知道各位有木有研究过 node 的 native 模块定义，其实这段代码很好找，过程不说了文件其实是：node_file.cc</p></blockquote><blockquote><p>基于我克隆的版本，绑定在 1457 行, 定义在 1192 行，最后调用了一个宏：ASYNC_CALL ，我们看到注释：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Wrapper for read(2).</span><br><span class="line"></span><br><span class="line">bytesRead = fs.read(fd, buffer, offset, length, position)</span><br><span class="line"></span><br><span class="line">0 fd        integer. file descriptor</span><br><span class="line">1 buffer    instance of Buffer</span><br><span class="line">2 offset    integer. offset to start reading into inside buffer</span><br><span class="line">3 length    integer. length to read</span><br><span class="line">4 position  file position - null for current position</span><br></pre></td></tr></table></figure><blockquote><p>可能会引起误解，这里的意思是接口兼容 <a href="http://www.man7.org/linux/man-pages/man2/read.2.html" target="_blank" rel="noopener">read(2)</a> 实现，但是其实不是基于read(2) ，而是使用宏 ASYNC_CALL 方式调用，我们深入 ASYNC_CALL 研究到它是 ASYNC_DEST_CALL 的宏，而 ASYNC_DEST_CALL 定义的内容如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#define ASYNC_DEST_CALL(func, request, dest, encoding, ...)                   \</span><br><span class="line">  Environment* env = Environment::GetCurrent(args);                           \</span><br><span class="line">  CHECK(request-&gt;IsObject());                                                 \</span><br><span class="line">  FSReqWrap* req_wrap = FSReqWrap::New(env, request.As&lt;Object&gt;(),             \</span><br><span class="line">                                       #func, dest, encoding);                \</span><br><span class="line">  int err = uv_fs_ ## func(env-&gt;event_loop(),                                 \</span><br><span class="line">                           req_wrap-&gt;req(),                                   \</span><br><span class="line">                           __VA_ARGS__,                                       \</span><br><span class="line">                           After);                                            \</span><br><span class="line">  req_wrap-&gt;Dispatched();                                                     \</span><br><span class="line">  if (err &lt; 0) &#123;                                                              \</span><br><span class="line">    uv_fs_t* uv_req = req_wrap-&gt;req();                                        \</span><br><span class="line">    uv_req-&gt;result = err;                                                     \</span><br><span class="line">    uv_req-&gt;path = nullptr;                                                   \</span><br><span class="line">    After(uv_req);                                                            \</span><br><span class="line">    req_wrap = nullptr;                                                       \</span><br><span class="line">  &#125; else &#123;                                                                    \</span><br><span class="line">    args.GetReturnValue().Set(req_wrap-&gt;persistent());                        \</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>别告诉我 ## 和 # 宏定义你不认识，因为我发现我周围基本没几个人认识(可能我们一群菜鸡Orz…)，其实按照当前的层次深入，就是调用了 uv_fs_read ，可知这是一个 libuv 提供的接口。<br>不过我们发现，其提供的 event_loop 来自参数作用域，我们想深入探究一下其作用域，根据调用栈回溯一下得到参数来自 fs.js</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><h6 id="基于已知的-JS-知识得到结论："><a href="#基于已知的-JS-知识得到结论：" class="headerlink" title="基于已知的 JS 知识得到结论："></a>基于已知的 JS 知识得到结论：</h6><blockquote><p>Node.js 的 IO 操作来自 libuv 的线程池，event_loop 基于 Node.js 给定的 JS 事件循环，JS 代码的运行环境是单线程的，但是 IO 操作是基于 libuv 的线程池中的其他线程 == </p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>感谢您阅读我的瞎分析 -。-  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;其实就是对 Node.js 的异步 IO 很感兴趣，加之最近可能要定制 Node.js ，所以决定研究研究看看。本身是 C/C++ 出身，看这点代码还是轻车熟路的，分析中并没有涉及 V8 的内部实现。&lt;br&gt;版本：&lt;a href=&quot;https://github.com/nodejs/node/tree/e116cbe3207a471b3d604466baad49b141e32230&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;e116cbe3207a471b3d604466baad49b141e32230&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;入口点&quot;&gt;&lt;a href=&quot;#入口点&quot; class=&quot;headerlink&quot; title=&quot;入口点&quot;&gt;&lt;/a&gt;入口点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;因为是要研究研究异步 IO ，我觉得从 fs 模块下手是最简单的了。源码通过 Git 克隆下来以后，直觉告诉我 fs 模块的源码入口点在 lib 里面。这里我从 fs.readFile 开始下手。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.dosk.win/tags/Node-js/"/>
    
      <category term="IO" scheme="https://www.dosk.win/tags/IO/"/>
    
      <category term="异步" scheme="https://www.dosk.win/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Rax替代React的方法与一些注意事项</title>
    <link href="https://www.dosk.win/2017/01/16/rax-replace-react/"/>
    <id>https://www.dosk.win/2017/01/16/rax-replace-react/</id>
    <published>2017-01-16T17:18:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><blockquote><p>这个阶段，创建一个标准的 React 项目就可以了，任凭你脚手架或者人肉配置都是可以的。<br>毕竟，我们只是要一个 React 项目而以。当然，也可以使用已经完成或者写的差不多的项目啦啦啦～～。<br>这里我推荐一下我自己的脚手架，比较简单暴力没有任何配置项，Github/boot2env ，还包含了一个实用脚本 bootvm ，创建一个项目即可。</p></blockquote><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><blockquote><p>我觉得这里不废话，直接上命令吧0.0:</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─[SpringHack@SpringHack]─[~/Public/Node.js/GG]</span><br><span class="line">└──╼ $cnpm install babel-preset-rax rax-webpack-plugin rax --save-dev</span><br><span class="line">✔ All packages installed (41 packages installed from npm registry, used 2s, speed 194.13kB/s, json 52(293.32kB), tarball 0B)</span><br><span class="line">Recently updated (since 2017-01-10): 8 packages (detail see file /Users/SpringHack/Public/Node.js/GG/node_modules/.recently_updates.txt)</span><br></pre></td></tr></table></figure><blockquote><p>这里假设你已经配置好 Webpack + React 的项目，并且将要使用 ES6 Class 语法开发React项目，这是必须的。Webpack 是我个人喜好；ES6 Class 也是，但是也是 Rax 必须的。然后，补上上面两个依赖就OK了。我们准备开始真真的写点什么了。</p></blockquote><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><blockquote><p>其实最少只要修改一个文件就好了，但是这里我演示下我的配置。</p></blockquote><h6 id="package-json"><a href="#package-json" class="headerlink" title="package.json:"></a>package.json:</h6><blockquote><p>(因为我将 babel 参数写在这里，当然你可以写在 webpack 配置或者 .babelrc 里面，随心咯)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;babel&quot;: &#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;rax&quot;,</span><br><span class="line">    &quot;latest&quot;,</span><br><span class="line">    &quot;stage-0&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;babel-plugin-transform-decorators-legacy&quot;,</span><br><span class="line">    &quot;react-hot-loader/babel&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是将 react 换成 rax 了 0.0</p></blockquote><h6 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js:"></a>webpack.config.js:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  new RaxWebpackPlugin(&#123;</span><br><span class="line">    target: &apos;bundle&apos;,</span><br><span class="line">    externalBuiltinModules: false,</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &apos;react&apos;: &apos;rax&apos;,</span><br><span class="line">    &apos;react-dom&apos;: &apos;rax&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>意思是加上这两部分，酱紫我们可以按照</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component&#125; from &apos;react&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>来写代码，但是最后引入的是 Rax ，其实最重要的目的在于兼容一些 React 组件库。这里 <strong>有个坑</strong> 后文再说。</p></blockquote><h3 id="开始写代码啦啦啦"><a href="#开始写代码啦啦啦" class="headerlink" title="开始写代码啦啦啦"></a>开始写代码啦啦啦</h3><blockquote><p>无论是写好的 html ，还是 webpack 插件生成的 html ，我们这里需要包含 web-rax-framework 框架本身。所以，提前引入好，代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//unpkg.com/web-rax-framework@0.1.3/dist/framework.web.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>然后才是正经的代码:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">        Author: SpringHack - springhack@live.cn</span><br><span class="line">        Last modified: 2017-01-17 01:06:56</span><br><span class="line">        Filename: main.js</span><br><span class="line">        Description: Created by SpringHack using vim automatically.</span><br><span class="line">**/</span><br><span class="line">import &apos;babel-polyfill&apos;;</span><br><span class="line">import &#123;createElement, render&#125; from &apos;react-dom&apos;;</span><br><span class="line">import App from &apos;./jsx/App.jsx&apos;;</span><br><span class="line"></span><br><span class="line">render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">        Author: SpringHack - springhack@live.cn</span><br><span class="line">        Last modified: 2017-01-17 01:06:49</span><br><span class="line">        Filename: App.jsx</span><br><span class="line">        Description: Created by SpringHack using vim automatically.</span><br><span class="line">**/</span><br><span class="line">import &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;createElement&#125; from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">export default class extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            name : &apos;Alxw&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render()</span><br><span class="line">    &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123;this.state.name&#125;&lt;/h2&gt;</span><br><span class="line">                &lt;button onClick=&#123;e =&gt; this.setState(&#123;name : &apos;Dosk&apos;&#125;)&#125;&gt;Click&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试试效果"><a href="#试试效果" class="headerlink" title="试试效果"></a>试试效果</h3><blockquote><p>测试一下，嗯，不错的。</p></blockquote><h3 id="第三方组件库"><a href="#第三方组件库" class="headerlink" title="第三方组件库"></a>第三方组件库</h3><blockquote><p>科科，那么我们来测试下第三方组件库吧。我是学弟口中用着 Mac 的土豪(你才土豪啊摔，攒了一年才买的啊摔)，本命却是 Google 的死忠粉，于是，我选择符合 Material Design 的 MUICSS 库。来来来，看代码0.0:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">        Author: SpringHack - springhack@live.cn</span><br><span class="line">        Last modified: 2017-01-17 01:06:56</span><br><span class="line">        Filename: main.js</span><br><span class="line">        Description: Created by SpringHack using vim automatically.</span><br><span class="line">**/</span><br><span class="line">import &apos;babel-polyfill&apos;;</span><br><span class="line">import &#123;createElement, render&#125; from &apos;react-dom&apos;;</span><br><span class="line">import App from &apos;./jsx/App.jsx&apos;;</span><br><span class="line">import &apos;muicss/dist/css/mui.min.css&apos;; //这里引入 muicss 的 css 0.0</span><br><span class="line"></span><br><span class="line">render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">        Author: SpringHack - springhack@live.cn</span><br><span class="line">        Last modified: 2017-01-17 01:06:49</span><br><span class="line">        Filename: App.jsx</span><br><span class="line">        Description: Created by SpringHack using vim automatically.</span><br><span class="line">**/</span><br><span class="line">import &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;createElement&#125; from &apos;react-dom&apos;;</span><br><span class="line">import &#123;Button&#125; from &apos;muicss/react&apos;; //引入 muicss 的 Button 组件</span><br><span class="line"></span><br><span class="line">export default class extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            name : &apos;Alxw&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render()</span><br><span class="line">    &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123;this.state.name&#125;&lt;/h2&gt;</span><br><span class="line">                &#123;/* 注意大小写变了，这是 muicss 的组件 */&#125;</span><br><span class="line">                &lt;Button onClick=&#123;e =&gt; this.setState(&#123;name : &apos;Dosk&apos;&#125;)&#125;&gt;Click&lt;/Button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再次测试效果"><a href="#再次测试效果" class="headerlink" title="再次测试效果"></a>再次测试效果</h3><blockquote><p>测试下吧。WTF？？？Component找不到？？？逗我？？？这里就是前文说的  <strong>坑</strong>  了<br>为什么？我们看下 Rax 的 index.js 的源码:</p></blockquote><h3 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./debug/devtools&apos;;</span><br><span class="line"></span><br><span class="line">export &#123;createElement, cloneElement, isValidElement, createFactory&#125; from &apos;./element&apos;;</span><br><span class="line">export Component from &apos;./component&apos;;</span><br><span class="line">export PureComponent from &apos;./purecomponent&apos;;</span><br><span class="line">export PropTypes from &apos;./proptypes&apos;;</span><br><span class="line">export render from &apos;./render&apos;;</span><br><span class="line">export findDOMNode from &apos;./findDOMNode&apos;;</span><br><span class="line">export unmountComponentAtNode from &apos;./unmountComponentAtNode&apos;;</span><br><span class="line">export findComponentInstance from &apos;./findComponentInstance&apos;;</span><br><span class="line">export setNativeProps from &apos;./setNativeProps&apos;;</span><br><span class="line">export version from &apos;./version&apos;;</span><br><span class="line">export &#123;setDriver, getDriver&#125; from &apos;./driver&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>嗯，貌似没什么问题嘛，呐呐，再看看 muicss 的 Button 组件的源码:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import * as jqLite from &apos;../js/lib/jqLite&apos;;</span><br><span class="line">import * as util from &apos;../js/lib/util&apos;;</span><br><span class="line"></span><br><span class="line">const PropTypes = React.PropTypes,</span><br><span class="line">      btnClass = &apos;mui-btn&apos;,</span><br><span class="line">      btnAttrs = &#123;color: 1, variant: 1, size: 1&#125;;</span><br><span class="line"></span><br><span class="line">class Button extends React.Component &#123; ...</span><br><span class="line">//悄悄的告诉你这里省略了嘘～～～</span><br></pre></td></tr></table></figure><blockquote><p>貌似也没什么问题嘛0.0<br>等等，woc，muicss 的引入方式是引入的模块 default …<br>但是 Rax并没提供 export default 23333333 …<br>但是 React 是提供兼容了的 …</p></blockquote><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><blockquote><p>那我们我们怎么解决的呢 …<br>其实蛮简单的 …<br>我们新建文件如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">        Author: SpringHack - springhack@live.cn</span><br><span class="line">        Last modified: 2017-01-17 01:06:40</span><br><span class="line">        Filename: src/client/rax-default.js</span><br><span class="line">        Description: Created by SpringHack using vim automatically.</span><br><span class="line">**/</span><br><span class="line">export &#123;</span><br><span class="line">    createElement,</span><br><span class="line">    cloneElement,</span><br><span class="line">    isValidElement,</span><br><span class="line">    createFactory,</span><br><span class="line">    Component,</span><br><span class="line">    PureComponent,</span><br><span class="line">    PropTypes,</span><br><span class="line">    render,</span><br><span class="line">    findDOMNode,</span><br><span class="line">    unmountComponentAtNode,</span><br><span class="line">    findComponentInstance,</span><br><span class="line">    setNativeProps,</span><br><span class="line">    version,</span><br><span class="line">    setDriver,</span><br><span class="line">    getDriver</span><br><span class="line">&#125; from &apos;rax&apos;;</span><br><span class="line"></span><br><span class="line">import * as React from &apos;rax&apos;;</span><br><span class="line"></span><br><span class="line">export default React;</span><br></pre></td></tr></table></figure><blockquote><p>想必有些人明白了，他不这么做，我们替他这么做一下不就得了。<br>不过，有些人问了，还要每次 import 这个文件么？No，不需要的。记得之前的 webpack 配置文件么？修改如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &apos;react&apos;: path.resolve(__dirname, &apos;src/client/rax-default.js&apos;),</span><br><span class="line">    &apos;react-dom&apos;: path.resolve(__dirname, &apos;src/client/rax-default.js&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相当于我们搞了个 wrapper 层，不过没有 webpack 中间件那么麻烦啦～～～<br>好了，我们试试效果，嗯，Nice～～～</p></blockquote><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><blockquote><p>体积大大减小，速度还可以咯，把 CDN 那部分拿下来放到自己的 CDN 应该会更 OK ～<br>我很喜欢这个项目，毕竟在那里呆过一阵子。前提是他不要成为 KPI 项目，但愿吧。。。<br>And ，配个图，表示我真的写了这些代码 23333</p></blockquote><p><img src="https://wx2.sinaimg.cn/large/7eb49035ly1fbt0tq4mfyj22801e04ce.jpg" alt="SpringHack"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这个阶段，创建一个标准的 React 项目就可以了，任凭你脚手架或者人肉配置都是可以的。&lt;br&gt;毕竟，我们只是要一个 React 项目而以。当然，也可以使用已经完成或者写的差不多的项目啦啦啦～～。&lt;br&gt;这里我推荐一下我自己的脚手架，比较简单暴力没有任何配置项，Github/boot2env ，还包含了一个实用脚本 bootvm ，创建一个项目即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;依赖安装&quot;&gt;&lt;a href=&quot;#依赖安装&quot; class=&quot;headerlink&quot; title=&quot;依赖安装&quot;&gt;&lt;/a&gt;依赖安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我觉得这里不废话，直接上命令吧0.0:&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://www.dosk.win/tags/React/"/>
    
      <category term="Rax" scheme="https://www.dosk.win/tags/Rax/"/>
    
      <category term="Webpack" scheme="https://www.dosk.win/tags/Webpack/"/>
    
      <category term="ES6" scheme="https://www.dosk.win/tags/ES6/"/>
    
      <category term="模块" scheme="https://www.dosk.win/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="import" scheme="https://www.dosk.win/tags/import/"/>
    
      <category term="export" scheme="https://www.dosk.win/tags/export/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Rax引擎结合Weex简单测试</title>
    <link href="https://www.dosk.win/2017/01/13/weex-rax/"/>
    <id>https://www.dosk.win/2017/01/13/weex-rax/</id>
    <published>2017-01-13T15:02:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单暴力的测试吧"><a href="#简单暴力的测试吧" class="headerlink" title="简单暴力的测试吧"></a>简单暴力的测试吧</h2><h3 id="1-Android项目的创建"><a href="#1-Android项目的创建" class="headerlink" title="1. Android项目的创建"></a>1. Android项目的创建</h3><blockquote><p>我这里使用 Android 开发，Android Studio 是必要的。为了简单起见，不要从头创建项目了，直接：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xkli/WXSample</span><br></pre></td></tr></table></figure><blockquote><p>使用一个 Weex 打包的 Demo 就OK了。</p></blockquote><h3 id="2-Rax项目的创建"><a href="#2-Rax项目的创建" class="headerlink" title="2. Rax项目的创建"></a>2. Rax项目的创建</h3><blockquote><p>还是简单暴力，直接：</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install rax-cli</span><br><span class="line">rax init demo</span><br><span class="line">cd demo</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="3-复制-bundle"><a href="#3-复制-bundle" class="headerlink" title="3. 复制 bundle"></a>3. 复制 bundle</h3><blockquote><p>修改 Android 工程 WXSample/app/{devtool.sh, clean.sh} 代码，清空脚本内容(碍事啦啦啦):</p></blockquote><blockquote><p>复制文件，自己改下路径：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ../../../Node.js/demo/build/js/index.bundle.min.js src/main/assets/build/hello.js</span><br></pre></td></tr></table></figure><h3 id="4-Build-Android-Project"><a href="#4-Build-Android-Project" class="headerlink" title="4. Build Android Project"></a>4. Build Android Project</h3><blockquote><p>你懂得～，试试看吧～</p></blockquote><blockquote><p>总的来说，其实就是不用 weex 来处理 {we, vue} 文件，而是改用 Rax 来处理 React 文件了。</p></blockquote><blockquote><p>可以打开开发者选项里面的【显示视图边界】来检测布局功能0.0</p></blockquote><blockquote><p>你可能会发现 Android Studio Logcat 有错误栈信息，那个是因为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.taobao.weex.devtools.debug.DebugServerProxy</span><br></pre></td></tr></table></figure><blockquote><p>找不到引起的，没什么大事 2333</p></blockquote><blockquote><p>最后就是，我其实是第一次用 Weex 23333</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单暴力的测试吧&quot;&gt;&lt;a href=&quot;#简单暴力的测试吧&quot; class=&quot;headerlink&quot; title=&quot;简单暴力的测试吧&quot;&gt;&lt;/a&gt;简单暴力的测试吧&lt;/h2&gt;&lt;h3 id=&quot;1-Android项目的创建&quot;&gt;&lt;a href=&quot;#1-Android项目的创建&quot; class=&quot;headerlink&quot; title=&quot;1. Android项目的创建&quot;&gt;&lt;/a&gt;1. Android项目的创建&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我这里使用 Android 开发，Android Studio 是必要的。为了简单起见，不要从头创建项目了，直接：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/xkli/WXSample&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;使用一个 Weex 打包的 Demo 就OK了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-Rax项目的创建&quot;&gt;&lt;a href=&quot;#2-Rax项目的创建&quot; class=&quot;headerlink&quot; title=&quot;2. Rax项目的创建&quot;&gt;&lt;/a&gt;2. Rax项目的创建&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;还是简单暴力，直接：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.dosk.win/tags/Node-js/"/>
    
      <category term="Rax" scheme="https://www.dosk.win/tags/Rax/"/>
    
      <category term="阿里巴巴" scheme="https://www.dosk.win/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"/>
    
      <category term="Weex" scheme="https://www.dosk.win/tags/Weex/"/>
    
      <category term="Android" scheme="https://www.dosk.win/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Rax渲染引擎简单试用</title>
    <link href="https://www.dosk.win/2017/01/13/rax-weex-alibaba-try/"/>
    <id>https://www.dosk.win/2017/01/13/rax-weex-alibaba-try/</id>
    <published>2017-01-13T06:45:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>今天在开源中国看到的新闻，立刻就来测试了。其实一开始看到后想到两件事：</p></blockquote><blockquote><ol><li>是不是又是 KPI 项目，总是做这种事都怕了;</li></ol></blockquote><blockquote><ol start="2"><li>轻量级的 React 也有人搞过了 (PReact) 阿里这边是做什么妖0.0.</li></ol></blockquote><a id="more"></a><blockquote><p>但是看了 GitHub 以后明白了为什么要搞这件事。其实目的很简单，为 Weex 蓬勃发展传教。</p></blockquote><blockquote><p>之前在滨江区的时候有幸参加了一次 Weex 布道(没记错的话是7月25日)，总的来说初期的 Weex 是依赖 Vue.js 作为前端，那时候在现场就有人问到是不是后期会引入 React 的前端支持，(表示并没有记住花名)就回答说会的。现在看来，这算是兑现了当初的承诺。</p></blockquote><blockquote><p>看到 Demo 的第一印象是 Component 是从 rax-component 引入的，会不会只是作为 Weex 的接口而不能完美兼容 React 呢？普通的 HTML Tags 是否也做了封装呢？看了下 Docs 的 Difference ，并没有提到这些，所以我决定试试看。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>安装过程，文档写的很清楚，我这里不全局安装了(因为 ./node_modules/.bin 是在我的 $PATH 里面的hhh)：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">┌─[SpringHack@SpringHack]─[~/Public/Node.js]</span><br><span class="line">└──╼ $ npm install rax-cli</span><br><span class="line">/Users/SpringHack/Public/Node.js</span><br><span class="line">└─┬ rax-cli@0.1.2</span><br><span class="line">  ├─┬ chalk@1.1.3</span><br><span class="line">  │ ├── ansi-styles@2.2.1</span><br><span class="line">  │ ├── escape-string-regexp@1.0.5</span><br><span class="line">  │ ├─┬ has-ansi@2.0.0</span><br><span class="line">  │ │ └── ansi-regex@2.0.0</span><br><span class="line">  │ ├── strip-ansi@3.0.1</span><br><span class="line">  │ └── supports-color@2.0.0</span><br><span class="line">  ├─┬ cross-spawn@4.0.2</span><br><span class="line">  │ ├─┬ lru-cache@4.0.2</span><br><span class="line">  │ │ ├── pseudomap@1.0.2</span><br><span class="line">  │ │ └── yallist@2.0.0</span><br><span class="line">  │ └─┬ which@1.2.12</span><br><span class="line">  │   └── isexe@1.1.2</span><br><span class="line">  ├─┬ easyfile@0.1.1</span><br><span class="line">  │ └─┬ mkdirp@0.5.1</span><br><span class="line">  │   └── minimist@0.0.8</span><br><span class="line">  ├── minimist@1.2.0</span><br><span class="line">  └─┬ prompt@0.2.14</span><br><span class="line">    ├── pkginfo@0.4.0</span><br><span class="line">    ├─┬ read@1.0.7</span><br><span class="line">    │ └── mute-stream@0.0.7</span><br><span class="line">    ├── revalidator@0.1.8</span><br><span class="line">    ├─┬ utile@0.2.1</span><br><span class="line">    │ ├── async@0.2.10</span><br><span class="line">    │ ├── deep-equal@1.0.1</span><br><span class="line">    │ ├── i@0.3.5</span><br><span class="line">    │ ├── ncp@0.4.2</span><br><span class="line">    │ └─┬ rimraf@2.5.4</span><br><span class="line">    │   └─┬ glob@7.1.1</span><br><span class="line">    │     ├── fs.realpath@1.0.0</span><br><span class="line">    │     ├─┬ inflight@1.0.6</span><br><span class="line">    │     │ └── wrappy@1.0.2</span><br><span class="line">    │     ├── inherits@2.0.3</span><br><span class="line">    │     ├─┬ minimatch@3.0.3</span><br><span class="line">    │     │ └─┬ brace-expansion@1.1.6</span><br><span class="line">    │     │   ├── balanced-match@0.4.2</span><br><span class="line">    │     │   └── concat-map@0.0.1</span><br><span class="line">    │     ├── once@1.4.0</span><br><span class="line">    │     └── path-is-absolute@1.0.1</span><br><span class="line">    └─┬ winston@0.8.3</span><br><span class="line">      ├── colors@0.6.2</span><br><span class="line">      ├── cycle@1.0.3</span><br><span class="line">      ├── eyes@0.1.8</span><br><span class="line">      ├── isstream@0.1.2</span><br><span class="line">      ├── pkginfo@0.3.1</span><br><span class="line">      └── stack-trace@0.0.9</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p>新建工程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─[SpringHack@SpringHack]─[~/Public/Node.js]</span><br><span class="line">└──╼ $rax init hello-world</span><br><span class="line">Creating a new Rax project in /Users/SpringHack/Public/Node.js/hello-world</span><br><span class="line">Install dependencies:</span><br><span class="line">...</span><br><span class="line">npm WARN rax-starter-kit@0.0.0 No repository field.</span><br><span class="line">npm WARN rax-starter-kit@0.0.0 No license field.</span><br><span class="line">To run your app:</span><br><span class="line">   cd hello-world</span><br><span class="line">   npm run start</span><br></pre></td></tr></table></figure><blockquote><p>进入文件夹并 start 理论上会看到如同 Github 截图类似的画面，但是我并没有看到，只有两个错误。很明显，webpack 打包的部分出问题了。为了继续测试，我们用 <a href="http://rax.taobaofed.org/playground/" target="_blank" rel="noopener">Here</a> 的 Playground 继续测试。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">framework.web.js:2Uncaught ReferenceError: define is not defined(anonymous) @ framework.web.js:2</span><br><span class="line">    at framework.web.js:2</span><br><span class="line">index.bundle.js:2Uncaught ReferenceError: define is not defined(anonymous) @ index.bundle.js:2</span><br><span class="line">    at index.bundle.js:2</span><br></pre></td></tr></table></figure><blockquote><p>我们的代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createElement, Component, render&#125; from &apos;rax&apos;;</span><br><span class="line">import &#123;View, Text&#125; from &apos;rax-components&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;name : &apos;Alxw&apos;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    this.clickA = e =&gt; this.setState(&#123;name : &apos;SpringHack&apos;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Name is: &#123;this.state.name&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; this.clickA()&#125;&gt;Change Name to SpringHack&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; this.clickB()&#125;&gt;Change Name to Dosk&lt;/button&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.clickB = e =&gt; this.setState(&#123;name : &apos;Dosk&apos;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = &#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">    justifyContent: &apos;center&apos;,</span><br><span class="line">    alignItems: &apos;center&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render(&lt;App /&gt;);</span><br></pre></td></tr></table></figure><blockquote><p>图上就会出现一行字和两个按钮，并且都是有效的，这只少证明了生命周期是兼容的(当然，shouldComponentUpdate 等我并没测试，不过想来应该是兼容的)。<br>至于全家桶方面呢？提供了 rax-redux ，可以用 Redux 是肯定的了，不过我在使用 React 的时候就不喜欢 Redux ，强烈建议适配 MobX 。</p></blockquote><h3 id="其他的不同"><a href="#其他的不同" class="headerlink" title="其他的不同"></a>其他的不同</h3><blockquote><p>这里看了下，只能使用 ES6 的 class 语法来继承，挺好的，时代在发展(-。-)；</p></blockquote><blockquote><p>setState 方法是同步的，而 React 的是异步的(记得某篇文章提过可以同步调用，React 内部实现)；</p></blockquote><blockquote><p>Render to new container node not clear existed children，不太清楚具体意思0.0；</p></blockquote><blockquote><p>findDOMNode 可以接受 id 作为参数，和 selector 类似啊0.0；</p></blockquote><blockquote><p>PropTypes 只是用来作为兼容的，没有实际用途(赞同，基本不用，但是严格的规范中最好使用)。</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>我反正是很支持的，只要这个项目不是真的是 KPI 项目就OK了。</p></blockquote><blockquote><p>HTML Tags 也是支持的，在浏览器情况下。至于那个 define 的问题，估计是我之前安装过 webpack 旧版本吧，之前坑过一次，权当没发现好了2333。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;今天在开源中国看到的新闻，立刻就来测试了。其实一开始看到后想到两件事：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;是不是又是 KPI 项目，总是做这种事都怕了;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;轻量级的 React 也有人搞过了 (PReact) 阿里这边是做什么妖0.0.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://www.dosk.win/tags/React/"/>
    
      <category term="Node.js" scheme="https://www.dosk.win/tags/Node-js/"/>
    
      <category term="Rax" scheme="https://www.dosk.win/tags/Rax/"/>
    
      <category term="阿里巴巴" scheme="https://www.dosk.win/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"/>
    
      <category term="Weex" scheme="https://www.dosk.win/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>类UNIX才是最舒适的开发环境</title>
    <link href="https://www.dosk.win/2017/01/04/unix-is-best/"/>
    <id>https://www.dosk.win/2017/01/04/unix-is-best/</id>
    <published>2017-01-04T14:52:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅仅感慨下，费那么大劲在 Windows 下搭建各种开发环境，其实大部分东西都受益于 POSIX 才能移植过来。我们所谓的类 UNXI 其实就是指符合 POSIX 标准，所以，何不直接在类 UNIX 环境下编程，多美好，顺便嘲讽：</p></blockquote><a id="more"></a><blockquote><p><a href="http://conw.net/archives/49/" target="_blank" rel="noopener">嘲讽传送门</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;仅仅感慨下，费那么大劲在 Windows 下搭建各种开发环境，其实大部分东西都受益于 POSIX 才能移植过来。我们所谓的类 UNXI 其实就是指符合 POSIX 标准，所以，何不直接在类 UNIX 环境下编程，多美好，顺便嘲讽：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="吐槽" scheme="https://www.dosk.win/tags/%E5%90%90%E6%A7%BD/"/>
    
      <category term="UNIX" scheme="https://www.dosk.win/tags/UNIX/"/>
    
      <category term="开发环境" scheme="https://www.dosk.win/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>2017年的元旦这几天都干了啥</title>
    <link href="https://www.dosk.win/2017/01/03/new-year-2017/"/>
    <id>https://www.dosk.win/2017/01/03/new-year-2017/</id>
    <published>2017-01-03T08:01:49.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>一个科学上网服务，各种禁我的账号。没话说，因为谁让我脚本签到得流量呢。。。不过程序员都是好斗的，这次我写了个 Web Service ，自动获取账号。。。</li></ol></blockquote><blockquote><ol start="2"><li>《面向程序员的数据挖掘指南》的 Gitbook 掉了，自己搭建了一个，传送门 <a href="http://acm.dosk.win/#:3050" target="_blank" rel="noopener">http://acm.dosk.win/#:3050</a></li></ol></blockquote><blockquote><ol start="3"><li>搭建了下 Hadoop 3.0 aplha 运行环境，就是任性的用 OpenJDK 8 (2333) ，最后发现貌似没有 Eclipse 插件2333…</li></ol></blockquote><blockquote><ol start="4"><li>家里联通 20M 光纤时不时能上 Github ，好奇怪 0.0 …</li></ol></blockquote><blockquote><ol start="5"><li>没了</li></ol></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;一个科学上网服务，各种禁我的账号。没话说，因为谁让我脚本签到得流量呢。。。不过程序员都是好斗的，这次我写了个 Web Service ，自动获取账号。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;《面向程序员的数据挖掘指南》的 Gitbook 掉了，自己搭建了一个，传送门 &lt;a href=&quot;http://acm.dosk.win/#:3050&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.dosk.win/#:3050&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;搭建了下 Hadoop 3.0 aplha 运行环境，就是任性的用 OpenJDK 8 (2333) ，最后发现貌似没有 Eclipse 插件2333…&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;家里联通 20M 光纤时不时能上 Github ，好奇怪 0.0 …&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;没了&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我航2016ACM/ICPC校赛的题解</title>
    <link href="https://www.dosk.win/2016/12/21/sau-2016-acm/"/>
    <id>https://www.dosk.win/2016/12/21/sau-2016-acm/</id>
    <published>2016-12-21T03:16:00.000Z</published>
    <updated>2018-11-11T16:28:50.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我航2016ACM-ICPC校赛的题解"><a href="#我航2016ACM-ICPC校赛的题解" class="headerlink" title="我航2016ACM/ICPC校赛的题解"></a>我航2016ACM/ICPC校赛的题解</h3><blockquote><p>比赛重现在我开发的oj上了，比赛的时候也是用的这个oj，支持几百人比赛没啥问题的稳定性很好0.0，一共五个学校参赛</p></blockquote><h3 id="我的oj传送门"><a href="#我的oj传送门" class="headerlink" title="我的oj传送门^_^"></a><a href="http://acm.dosk.win/" target="_blank" rel="noopener">我的oj传送门^_^</a></h3><blockquote><p>A 说反话，赤裸裸的水题，坑在于空格可能是多个</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int reverse() &#123;</span><br><span class="line">char ch = getchar();</span><br><span class="line">int rs;</span><br><span class="line"></span><br><span class="line">if (ch == &apos; &apos;)</span><br><span class="line">return 1;</span><br><span class="line">if (ch == EOF)</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">rs = reverse();</span><br><span class="line">putchar(ch);</span><br><span class="line">return rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">while (reverse() != 0) &#123;</span><br><span class="line">putchar(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>B 优雅的阶乘，这不用说了吧</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">       int ret = 1, jie = 1;</span><br><span class="line">       for (int i=2;i&lt;=n;++i)</span><br><span class="line">           ret += jie *= i;</span><br><span class="line">       cout &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>C 不优雅的阶乘，可以用Java做偷懒–</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void mul(int *n, int m)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 1; i &lt;= n[0]; i++)</span><br><span class="line">        n[i] *= m;</span><br><span class="line">    for(int i = 1; i &lt; n[0]; i++) &#123;</span><br><span class="line">        if(n[i] &gt;= 10000) &#123;</span><br><span class="line">            n[i + 1] += n[i] / 10000;</span><br><span class="line">            n[i] %= 10000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n[n[0]] &gt;= 10000) &#123;</span><br><span class="line">        n[n[0] + 1] = n[n[0]] / 10000;</span><br><span class="line">        n[n[0]++] %= 10000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void add(int *n, int *m)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 1; i &lt;= m[0]; i++) &#123;</span><br><span class="line">        if(i &lt;= n[0]) n[i] += m[i];</span><br><span class="line">        else n[i] = m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    if(n[0] &lt; m[0]) n[0] = m[0];</span><br><span class="line">    for(int i = 1; i &lt; n[0]; i++) &#123;</span><br><span class="line">        if(n[i] &gt;= 10000) &#123;</span><br><span class="line">            n[i + 1] += n[i] / 10000;</span><br><span class="line">            n[i] -= 10000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n[n[0]] &gt;= 10000) &#123;</span><br><span class="line">        n[n[0] + 1] += n[n[0]] / 10000;</span><br><span class="line">        n[n[0]++] -= 10000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print(int *n)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d&quot;, n[n[0]]);</span><br><span class="line">    for(int i = n[0] - 1; i &gt; 0; i--)</span><br><span class="line">        printf(&quot;%04d&quot;, n[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sum[1111][1024], fac[1024];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    fac[0] = fac[1] = 1;</span><br><span class="line">    sum[0][0] = 1; sum[0][1] = 0;</span><br><span class="line">    for(int i = 1; i &lt; 1111; i++) &#123;</span><br><span class="line">        sum[i][0] = 1; sum[i][1] = 0;</span><br><span class="line">        mul(fac, i);</span><br><span class="line">        add(sum[i], sum[i - 1]);</span><br><span class="line">        add(sum[i], fac);</span><br><span class="line">    &#125;</span><br><span class="line">    while(~scanf(&quot;%d&quot;, &amp;n)) &#123;</span><br><span class="line">        print(sum[n]);</span><br><span class="line">        putchar(&apos;\n&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>D 阿甘再一次想知道线段的总长，这个题在比赛的时候数据范围给错了23333，用纯暴力的话也可以刚好过</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">const int maxn = 2525;</span><br><span class="line">int num[5050], N;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line"></span><br><span class="line">    memset(num, 0, sizeof(num));</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">    for(int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        num[n + maxn]++;</span><br><span class="line">&#125;</span><br><span class="line">    ll ans = 0;</span><br><span class="line">    int s = 0;</span><br><span class="line">    for(int i = 0; i &lt; 5050; i++) &#123;</span><br><span class="line">        if(num[i]) &#123;</span><br><span class="line">            ans += ((ll)s * 2 + num[i] - N) * num[i] * (i - maxn);</span><br><span class="line">            s += num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;, ans * 2);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>E 报名身高差，也是水的0.0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N, n, ma, ans;</span><br><span class="line">    scanf(&quot;%d%d%d&quot;, &amp;N, &amp;ma, &amp;n);</span><br><span class="line">    ans = ma - n;</span><br><span class="line">    for(int i = 2; i &lt; N; i++) &#123;</span><br><span class="line">        if(n &gt; ma) ma = n;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        if(ma - n &gt; ans)</span><br><span class="line">            ans = ma - n;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>F 我让你不刷题，动态规划，每秒有2或3个位置被打中，f[i][j] = max{f[i+1][j-1],f[i+1][j],f[i+1][j+1]}+f[i][j]，倒叙查找到f[0][0]，f[i][j]表示第 i 秒在 j 位置的最大值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int dp[2][110], ball, N, M;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;N, &amp;M);</span><br><span class="line">    memset(dp, 0, sizeof(dp));</span><br><span class="line">    for(int i = 1; i &lt;= N; i++) &#123;</span><br><span class="line">        int k = i &amp; 1;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;ball);</span><br><span class="line">        for(int j = 1; j &lt;= i &amp;&amp; j &lt; M; j++) &#123;</span><br><span class="line">            dp[k][j] = dp[k ^ 1][j - 1];</span><br><span class="line">            if(dp[k ^ 1][j] &gt; dp[k][j])</span><br><span class="line">                dp[k][j] = dp[k ^ 1][j];</span><br><span class="line">            if(dp[k ^ 1][j + 1] &gt; dp[k][j])</span><br><span class="line">                dp[k][j] = dp[k ^ 1][j + 1];</span><br><span class="line">            int dis = ball - j;</span><br><span class="line">            if(dis &gt;= -1 &amp;&amp; dis &lt;= 1)</span><br><span class="line">                dp[k][j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ans = 0;</span><br><span class="line">    for(int i = 1; i &lt; M; i++)</span><br><span class="line">        if(dp[N &amp; 1][i] &gt; ans)</span><br><span class="line">            ans = dp[N &amp; 1][i];</span><br><span class="line">    printf(&quot;%d\n&quot;, ans);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>G 我让你不戴帽子，并查集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">const int MOD = 1000000007;</span><br><span class="line">const int maxn = 100010;</span><br><span class="line">int pa[maxn], val[maxn], dis[maxn], N, M;</span><br><span class="line"></span><br><span class="line">int findp(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(pa[x] != x) &#123;</span><br><span class="line">        int p = findp(pa[x]);</span><br><span class="line">        dis[x] += dis[pa[x]];</span><br><span class="line">        if(dis[x] &gt; MOD)</span><br><span class="line">            dis[x] %= MOD;</span><br><span class="line">        return pa[x] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char o;</span><br><span class="line">    int a, b;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;N, &amp;M);</span><br><span class="line">    memset(dis, 0, sizeof(dis));</span><br><span class="line">    for(int i = 1; i &lt;= N; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        pa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; M; i++) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        scanf(&quot;%c %d&quot;, &amp;o, &amp;a);</span><br><span class="line">        if(o == &apos;A&apos;) &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;b);</span><br><span class="line">            pa[b] = a;</span><br><span class="line">            dis[b] = abs(val[a] - val[b]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            findp(a);</span><br><span class="line">            printf(&quot;%d\n&quot;, dis[a]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>H 帝国扩张，水题，找到最大矩形后，测试四个边各向里去掉一个的情况，注意特判下特殊情况就好</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">const int maxn = 50050;</span><br><span class="line">int x[maxn], y[maxn];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N, x1, x2, x3, x4, y1, y2, y3, y4;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">    for(int i = 0; i &lt; N; i++)</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;x[i], &amp;y[i]);</span><br><span class="line">    x1 = x2 = y1 = y2 = 0x3f3f3f3f;</span><br><span class="line">    x3 = x4 = y3 = y4 = 0;</span><br><span class="line">    for(int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        if(x[i] &lt; x1) &#123; x2 = x1; x1 = x[i]; &#125;</span><br><span class="line">        else if(x[i] &lt; x2) &#123; x2 = x[i]; &#125;</span><br><span class="line">        if(x[i] &gt; x4) &#123; x3 = x4; x4 = x[i]; &#125;</span><br><span class="line">        else if(x[i] &gt; x3) &#123; x3 = x[i]; &#125;</span><br><span class="line">        if(y[i] &lt; y1) &#123; y2 = y1; y1 = y[i]; &#125;</span><br><span class="line">        else if(y[i] &lt; y2) &#123; y2 = y[i]; &#125;</span><br><span class="line">        if(y[i] &gt; y4) &#123; y3 = y4; y4 = y[i]; &#125;</span><br><span class="line">        else if(y[i] &gt; y3) &#123; y3 = y[i]; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans = (x4 - x1) * (y4 - y1);</span><br><span class="line">    for(int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        int minx = x1;</span><br><span class="line">        if(x[i] == minx) minx = x2;</span><br><span class="line">        int maxx = x4;</span><br><span class="line">        if(x[i] == maxx) maxx = x3;</span><br><span class="line">        int miny = y1;</span><br><span class="line">        if(y[i] == miny) miny = y2;</span><br><span class="line">        int maxy = y4;</span><br><span class="line">        if(y[i] == maxy) maxy = y3;</span><br><span class="line">        int area = (maxx - minx) * (maxy - miny);</span><br><span class="line">        if(area &lt; ans) ans = area;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>I 超级寻宝，原题，网上有答案</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define MAXN 1010</span><br><span class="line"></span><br><span class="line">int Q[MAXN];</span><br><span class="line">int DP[MAXN];</span><br><span class="line">int D[MAXN];</span><br><span class="line">vector&lt;int&gt; E[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int cmp(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    return Q[x] &lt; Q[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">  int N, ECST;</span><br><span class="line">  cin &gt;&gt; N &gt;&gt; ECST;</span><br><span class="line">  for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">    int D;</span><br><span class="line">    cin &gt;&gt; Q[i] &gt;&gt; D;</span><br><span class="line">    for (int j = 0; j &lt; D; j++) &#123;</span><br><span class="line">      int v;</span><br><span class="line">      cin &gt;&gt; v;</span><br><span class="line">      E[i].push_back(v - 1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vector&lt;int&gt; PI;</span><br><span class="line">  for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">    PI.push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(PI.begin(), PI.end(), cmp);</span><br><span class="line"></span><br><span class="line">  int result = 0;</span><br><span class="line">  for (int i = N - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">    int u = PI[i];</span><br><span class="line"></span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    memset(D, -1, sizeof(D));</span><br><span class="line">    q.push(u);</span><br><span class="line">    D[u] = 0;</span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">      int v = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      for (int i = 0; i &lt; E[v].size(); i++) &#123;</span><br><span class="line">        int nv = E[v][i];</span><br><span class="line">        if (D[nv] == -1) &#123;</span><br><span class="line">          D[nv] = D[v] + 1;</span><br><span class="line">          q.push(nv);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int res = Q[u];</span><br><span class="line">    for (int j = 0; j &lt; N; j++) &#123;</span><br><span class="line">      if (D[j] != -1) &#123;</span><br><span class="line">        res = max(res, Q[u] + DP[j] - ECST * D[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DP[u] = res;</span><br><span class="line">    result = max(result, res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>J 我帮你表白？，改编的题，poj原题，输入格式变化了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Edge &#123;</span><br><span class="line">        int to, dis, cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; G[110];</span><br><span class="line">int dp[110][10010];</span><br><span class="line">int used[110];</span><br><span class="line">int K, N, R, ans;</span><br><span class="line"></span><br><span class="line">int dfs(int s, int cost, int dis)</span><br><span class="line">&#123;</span><br><span class="line">        if(cost&gt;K) return 0;</span><br><span class="line">        if(dis&gt;ans) return 0;</span><br><span class="line">        if(dis&gt;dp[s][cost]) return 0;</span><br><span class="line">        if(s==N) &#123;</span><br><span class="line">                ans = min(ans, dis);</span><br><span class="line">                return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[s][cost] = dis;</span><br><span class="line">        for(int i=0; i&lt;G[s].size(); i++) &#123;</span><br><span class="line">                if(used[G[s][i].to]) continue;</span><br><span class="line">                used[G[s][i].to] = 1;</span><br><span class="line">                dfs(G[s][i].to, cost+G[s][i].cost, dis+G[s][i].dis);</span><br><span class="line">                used[G[s][i].to] = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        int s, t, l, c;</span><br><span class="line"></span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;N, &amp;K, &amp;R);</span><br><span class="line">        for(int i=0; i&lt;R; i++) &#123;</span><br><span class="line">                scanf(&quot;%d%d%d%d&quot;, &amp;s, &amp;t, &amp;l, &amp;c);</span><br><span class="line">                if(s!=t)</span><br><span class="line">                        G[s].push_back((Edge)&#123;t, l, c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        memset(used, 0, sizeof(used));</span><br><span class="line">        for(int i=0; i&lt;110; i++)</span><br><span class="line">                for(int j=0; j&lt;10010; j++)</span><br><span class="line">                        dp[i][j] = 1&lt;&lt;30;</span><br><span class="line">        used[1] = 1;</span><br><span class="line">        ans = 1&lt;&lt;30;</span><br><span class="line">        dfs(1, 0, 0);</span><br><span class="line">        if(ans&lt;(1&lt;&lt;30))</span><br><span class="line">                printf(&quot;%d\n&quot;, ans);</span><br><span class="line">        else printf(&quot;-1\n&quot;);</span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我航2016ACM-ICPC校赛的题解&quot;&gt;&lt;a href=&quot;#我航2016ACM-ICPC校赛的题解&quot; class=&quot;headerlink&quot; title=&quot;我航2016ACM/ICPC校赛的题解&quot;&gt;&lt;/a&gt;我航2016ACM/ICPC校赛的题解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;比赛重现在我开发的oj上了，比赛的时候也是用的这个oj，支持几百人比赛没啥问题的稳定性很好0.0，一共五个学校参赛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;我的oj传送门&quot;&gt;&lt;a href=&quot;#我的oj传送门&quot; class=&quot;headerlink&quot; title=&quot;我的oj传送门^_^&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.dosk.win/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的oj传送门^_^&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A 说反话，赤裸裸的水题，坑在于空格可能是多个&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Online Judge" scheme="https://www.dosk.win/tags/Online-Judge/"/>
    
      <category term="算法" scheme="https://www.dosk.win/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>macOS开启nfs给虚拟机环境完整步骤</title>
    <link href="https://www.dosk.win/2016/12/14/macos-nfs-operation/"/>
    <id>https://www.dosk.win/2016/12/14/macos-nfs-operation/</id>
    <published>2016-12-14T11:03:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实步骤很简单，但是网上的答案大部分不完整。</p></blockquote><blockquote><p>编辑 /etc/exports ，格式类似下面，前面是共享路径，后面是映射的用户，可以多条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/SpringHack/Public    -mapall=501:20</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><blockquote><p>编辑 /etc/nfs.conf ，结尾添加这句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nfs.server.mount.require_resv_port = 0</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>三条命令，前两条分别是启用和刷新配置，最后一条是显示配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nfsd enable</span><br><span class="line">sudo nfsd update</span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>之后在虚拟机下就能连接了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs -o rw 10.0.2.2:/Users/SpringHack/Public /opt</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实步骤很简单，但是网上的答案大部分不完整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;编辑 /etc/exports ，格式类似下面，前面是共享路径，后面是映射的用户，可以多条：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/Users/SpringHack/Public    -mapall=501:20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="https://www.dosk.win/tags/macOS/"/>
    
      <category term="nfs" scheme="https://www.dosk.win/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>新的oj核心，用C写的</title>
    <link href="https://www.dosk.win/2016/12/05/alxw-judge-core-src/"/>
    <id>https://www.dosk.win/2016/12/05/alxw-judge-core-src/</id>
    <published>2016-12-05T07:04:00.000Z</published>
    <updated>2018-11-11T16:28:50.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近实在是无聊至极，于是开始了我的oj核心重写计划。<br>简单来说，原来是用python写的，结合了Lo-runner这个库；不过鉴于后来我改写了不少，而且python的内存效率实在是让人捉急，于是开始了改写计划。</p></blockquote><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">springhack@Dosk:~/alxw_judge_core_src$ tree</span><br><span class="line">.</span><br><span class="line">├── calls.py</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">└── src</span><br><span class="line">    ├── access.c</span><br><span class="line">    ├── cjson</span><br><span class="line">    │   ├── cJSON.c</span><br><span class="line">    │   └── cJSON.h</span><br><span class="line">    ├── config.h</span><br><span class="line">    ├── limit.c</span><br><span class="line">    ├── main.c</span><br><span class="line">    ├── proc.c</span><br><span class="line">    ├── run.c</span><br><span class="line">    └── socket.c</span><br><span class="line"></span><br><span class="line">2 directories, 12 files</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><blockquote><p>入口点是 main.c ，里面进行了两方面的初始化。首先 initcall(); 是用来初始化系统调用白名单的，白名单来自hustoj。函数的实现在文件 config.h 里面。<br>其次 init_socket(argv[1]); 用来初始化 socket ，因为评测进程是和任务的逻辑独立的，IPC使用unix domain socket。<br>socket.c 里面有具体实现，不过核心是在 run.c 这个文件里面。其实无非是照扒原来的代码，美其名曰重构－－</p></blockquote><h3 id="核心点"><a href="#核心点" class="headerlink" title="核心点"></a>核心点</h3><blockquote><p>其实还是那几个，用 ptrace 追踪系统调用，设置资源限制等。<br>不过这次有两点不同： 1.是三个默认设备文件，这次偷懒直接用 freopen  来实现了－－ 2.这次的内存检测方案，是按照 zoj 的方案(java的不是，好虐心)的方案。<br>目前来看，还是比较准确和稳定的。</p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote><p>其实这个部署还是比较简单的，原本的安装脚本，里面稍微加一句话就OK，就是切换 alxw_judge_core 的 Install.sh 的分支。简单的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout c_runner</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>科科－－</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>我比较懒。。。不过今年我们的校赛应该是会用这个系统没跑了－－ </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近实在是无聊至极，于是开始了我的oj核心重写计划。&lt;br&gt;简单来说，原来是用python写的，结合了Lo-runner这个库；不过鉴于后来我改写了不少，而且python的内存效率实在是让人捉急，于是开始了改写计划。&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.dosk.win/tags/Linux/"/>
    
  </entry>
  
</feed>
